import type { Appearance, CommercePlanResource, CommerceSubscriberType, CommerceSubscriptionPlanPeriod, CommerceSubscriptionResource } from '@clerk/types';
import type { PropsWithChildren } from 'react';
import type { LocalizationKey } from '../../localization';
export declare const useSubscriptions: (subscriberType?: CommerceSubscriberType) => {
    setCache: (state: import("../../hooks").State<import("@clerk/types").ClerkPaginatedResponse<CommerceSubscriptionResource>, any> | ((params: import("../../hooks").State<import("@clerk/types").ClerkPaginatedResponse<CommerceSubscriptionResource>, any>) => import("../../hooks").State<import("@clerk/types").ClerkPaginatedResponse<CommerceSubscriptionResource>, any>)) => void;
    invalidate: () => void;
    revalidate: () => void;
    data?: import("@clerk/types").ClerkPaginatedResponse<CommerceSubscriptionResource> | null | undefined;
    error?: any;
    isLoading?: boolean | undefined;
    isValidating?: boolean | undefined;
    cachedAt?: number;
};
export declare const usePlans: (subscriberType?: CommerceSubscriberType) => {
    setCache: (state: import("../../hooks").State<CommercePlanResource[], any> | ((params: import("../../hooks").State<CommercePlanResource[], any>) => import("../../hooks").State<CommercePlanResource[], any>)) => void;
    invalidate: () => void;
    revalidate: () => void;
    data?: CommercePlanResource[] | null | undefined;
    error?: any;
    isLoading?: boolean | undefined;
    isValidating?: boolean | undefined;
    cachedAt?: number;
};
export declare const PlansContextProvider: ({ children }: PropsWithChildren) => import("@emotion/react/jsx-runtime").JSX.Element;
type HandleSelectPlanProps = {
    plan: CommercePlanResource;
    planPeriod: CommerceSubscriptionPlanPeriod;
    onSubscriptionChange?: () => void;
    mode?: 'modal' | 'mounted';
    event?: React.MouseEvent<HTMLElement>;
    appearance?: Appearance;
    newSubscriptionRedirectUrl?: string;
};
export declare const usePlansContext: () => {
    componentName: "Plans";
    activeOrUpcomingSubscription: (plan: CommercePlanResource) => CommerceSubscriptionResource | undefined;
    activeAndUpcomingSubscriptions: (plan: CommercePlanResource) => CommerceSubscriptionResource[];
    activeOrUpcomingSubscriptionBasedOnPlanPeriod: (plan: CommercePlanResource, planPeriod?: CommerceSubscriptionPlanPeriod) => CommerceSubscriptionResource | undefined;
    isDefaultPlanImplicitlyActiveOrUpcoming: boolean;
    handleSelectPlan: ({ plan, planPeriod, onSubscriptionChange, mode, event, appearance, newSubscriptionRedirectUrl, }: HandleSelectPlanProps) => void;
    buttonPropsForPlan: ({ plan, subscription: sub, isCompact, selectedPlanPeriod, }: {
        plan?: CommercePlanResource;
        subscription?: CommerceSubscriptionResource;
        isCompact?: boolean;
        selectedPlanPeriod?: CommerceSubscriptionPlanPeriod;
    }) => {
        localizationKey: LocalizationKey;
        variant: "bordered" | "solid";
        colorScheme: "secondary" | "primary";
        isDisabled: boolean;
        disabled: boolean;
    };
    canManageSubscription: ({ plan, subscription: sub }: {
        plan?: CommercePlanResource;
        subscription?: CommerceSubscriptionResource;
    }) => boolean;
    captionForSubscription: (subscription: CommerceSubscriptionResource) => LocalizationKey;
    upcomingSubscriptionsExist: boolean;
    defaultFreePlan: CommercePlanResource | undefined;
    plans: CommercePlanResource[];
    subscriptions: CommerceSubscriptionResource[];
    isLoading: boolean;
    revalidate: () => void;
};
export {};
